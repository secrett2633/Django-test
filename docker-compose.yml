version: "3.8"

services:
  ts-proxy:
    image: nginx:1.22.1
    container_name: test-proxy
    restart: always
    ports:
      - "8000:80"
    volumes:
      - ./:/etc/nginx/conf.d
      - ./static:/usr/share/nginx/html/static
    networks:
      - test-network
    depends_on:
      - ts-django

  ts-postgres:
    image: postgres:13.10-alpine
    container_name: test-db-dev
    restart: always
    environment:
      - POSTGRES_PASSWORD=postgres
      - DJANGO_DEBUG=False
    networks:
      - test-network
    volumes:
      - ts-db:/var/lib/postgresql/data

  ts-django:
    build:
      context: .
    container_name: test-dev
    restart: always
    env_file:
      - .env
    environment:
      - PORTS=8000
      - DJANGO_CONFIGURATION=production
    command:
      - /bin/sh
      - -c
      - |
        dockerize -wait tcp://ts-postgres:5432 -timeout 20s
        poetry run python manage.py makemigrations
        poetry run python manage.py migrate
        poetry run gunicorn -c gunicorn.conf.py app.core.asgi:application
    networks:
      - test-network
    depends_on:
      - ts-postgres
    volumes:
      - ./save:/workdir/save

  ts-redis:
    image: redis:7.0-alpine
    container_name: test-redis-dev
    restart: always
    networks:
      - test-network

volumes:
  ts-db:

networks:
  test-network:
    name: test-network
    driver: bridge